let mongoose,bcrypt;_031‍.x([["default",()=>_031‍.o]]);_031‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_031‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);


const {Schema} = mongoose;
const UserSchema = new Schema({
	username: String,
	hashedPassword: String,
});

UserSchema.methods.serialize = function () {
	const data = this.toJSON();
	delete data.hashedPassword;
	return data;
};

UserSchema.methods.setPassword = async function(password) {
	const hash = await bcrypt.hash(password, 10);
	this.hashedPassword = hash;
};

UserSchema.methods.checkPassword = async function(password) {
	const result = await bcrypt.compare(password, this.hashedPassword);
	return result;
};

UserSchema.statics.findByUsername = function (username) {
	return this.findOne({username});
};

const User = mongoose.model('User', UserSchema);
_031‍.d(User);