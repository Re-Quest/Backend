let Joi,User;_24b‍.x([["register",()=>register],["login",()=>login],["check",()=>check],["logout",()=>logout]]);_24b‍.w("@hapi/joi",[["default",["Joi"],function(v){Joi=v}]]);_24b‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);

       const register = async ctx => {
	//회원가입
	console.log("register");
	const schema = Joi.object().keys({
		username: Joi.string()
			.alphanum()
			.min(3)
			.max(20)
			.required(),
		password: Joi.string().required(),
	});
	const result = schema.validate(ctx.request.body);
	if (result.error) {
		ctx.status = 400;
		ctx.body = result.error;
		return;
	}

	const { username, password } = ctx.request.body;
	try {
		//username이 이미 존재하는지 확인
		const exists = await User.findByUsername(username);
		if (exists) {
			ctx.status = 409; //Conflict
			return;
		}

		const user = new User({
			username,
		});
		await user.setPassword(password);
		await user.save();

		//응답할 데이터에서 hashedPassword 필드 제거
		ctx.body = user.serialize();
	} catch (e) {
		ctx.throw(500, e);
	}
};

       const login = async ctx => {
	//로그인
	console.log("hello")
};

       const check = async ctx => {
	//로그인 상태 확인
};

       const logout = async ctx => {
	//로그아웃
};

